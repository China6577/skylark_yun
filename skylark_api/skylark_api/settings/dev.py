"""
Django settings for skylark_api project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os, sys
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # skylark_api项目目录位置
# 可以直接从app目录中导入模板或者包，而不需要写完整的相对导入路径
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))  # 将skylark_api项目目录位置和apps拼接的路径加入模块搜索路径
# 否则找不到app的位置 因为不加拼接的路径只会搜索skylark_api项目目录位置下一级的模块

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wkz%45mir+gy*8$8a)$x1i^cuyuxss&5&0=^j-p+06xq)+85(+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'simpleui',  # simpleui要放在最上面
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    # 注意，加上drf框架的注册
    'rest_framework',
    # 子应用
    'Home',
    'User',
    'Course',
    'Cart',
    'django_filters',
    'django_ckeditor_5',
    'Order',
    'Coupon',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 确保要在 'django.middleware.common.CommonMiddleware' 之前
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 允许跨域请求的域
CORS_ORIGIN_ALLOW_ALL = True

# 配置自定义用户模型类
AUTH_USER_MODEL = 'User.User'

# 修改自定义认证后端
AUTHENTICATION_BACKENDS = [
    'User.utils.UsernameMobileAuthBackend',
]

# rest_framework配置项
REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': 'skylark_api.utils.exceptions.custom_exception_handler',
    # JWT认证机制
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

# CKEditor 5 配置
CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', 'undo', 'redo'],
        'heading': {
            'options': [
                {'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph'},
                {'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1'},
                {'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2'},
                {'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3'}
            ]
        },
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
            'styles': [
                'full',
                'alignLeft',
                'alignRight'
            ]
        },
        'table': {
            'contentToolbar': ['tableColumn', 'tableRow', 'mergeTableCells', 'tableProperties', 'tableCellProperties'],
            'tableProperties': {
                'borderColors': [
                    {'color': 'black'},
                    {'color': '#FF0000'},
                    {'color': '#00FF00'},
                    {'color': '#0000FF'}
                ],
                'backgroundColors': [
                    {'color': 'white'},
                    {'color': '#FF0000'},
                    {'color': '#00FF00'},
                    {'color': '#0000FF'}
                ]
            }
        },
        'language': 'en',
        'licenseKey': '',
    },
    'shopping_cart': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', 'undo', 'redo', 'insertTable', 'mediaEmbed'],
        'heading': {
            'options': [
                {'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph'},
                {'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1'},
                {'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2'},
                {'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3'}
            ]
        },
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
            'styles': [
                'full',
                'alignLeft',
                'alignRight'
            ]
        },
        'table': {
            'contentToolbar': ['tableColumn', 'tableRow', 'mergeTableCells', 'tableProperties', 'tableCellProperties'],
            'tableProperties': {
                'borderColors': [
                    {'color': 'black'},
                    {'color': '#FF0000'},
                    {'color': '#00FF00'},
                    {'color': '#0000FF'}
                ],
                'backgroundColors': [
                    {'color': 'white'},
                    {'color': '#FF0000'},
                    {'color': '#00FF00'},
                    {'color': '#0000FF'}
                ]
            }
        },
        'language': 'en',
        'licenseKey': '',
    }
}

SIMPLE_JWT = {
    # 配置访问令牌的有效期
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),  # 访问令牌的有效期为 1 天。

    # 配置 “记住我” 功能时刷新令牌的有效期
    'REFRESH_TOKEN_EXPIRE_REMEMBER_ME': timedelta(days=7),  # 如果启用“记住我”，刷新令牌有效期为 7 天。

    # 配置普通刷新令牌的有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),  # 刷新令牌的有效期为 14 天。

    # 是否在刷新令牌时生成新的刷新令牌
    'ROTATE_REFRESH_TOKENS': True,  # 启用刷新令牌的旋转机制，刷新时生成新的刷新令牌。

    # 是否在刷新令牌后将旧的刷新令牌加入黑名单
    'BLACKLIST_AFTER_ROTATION': True,  # 如果启用了刷新令牌旋转，旧令牌将被列入黑名单，防止滥用。

    # 是否在成功认证后更新用户的 last_login 字段
    'UPDATE_LAST_LOGIN': True,  # 启用时，用户成功登录后，更新其 `last_login` 字段。

    # 配置签名算法
    'ALGORITHM': 'HS256',  # 使用 HMAC-SHA256 算法对令牌进行签名。

    # 签名密钥
    'SIGNING_KEY': SECRET_KEY,  # 用于签名令牌的密钥，应替换为更复杂的密钥，并妥善保管。

    # 验证令牌的公钥（通常用于非对称加密）
    'VERIFYING_KEY': None,  # 如果使用非对称加密（如 RS256），这里设置为验证签名的公钥。

    # 令牌的受众（可选）
    'AUDIENCE': None,  # 指定令牌的受众（可选，用于验证 Token 是否发给特定的客户端）。

    # 令牌的发行者（可选）
    'ISSUER': None,  # 指定令牌的发行者（可选，用于验证 Token 来源）。

    # JSON Web Key (JWK) URL，用于获取密钥（可选）
    'JWK_URL': None,  # 指定用于验证签名的 JSON Web Key (JWK) URL（通常用于第三方认证服务）。

    # 时间容差（以秒为单位），允许客户端的时间与服务器时间有一定的偏差
    'LEEWAY': 0,  # 默认不允许时间偏差。

    # 配置令牌的认证头部类型
    'AUTH_HEADER_TYPES': ('Bearer',),  # 客户端发送的 HTTP 头部中，指定认证令牌的类型为 "Bearer"。

    # 配置认证头部的名称
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',  # 客户端传递令牌时使用的 HTTP 请求头部名称。

    # 配置用户模型的主键字段名
    'USER_ID_FIELD': 'id',  # 用户模型中用作标识的字段名（如 `id` 字段）。

    # 配置用户 ID 在令牌中的声明名称
    'USER_ID_CLAIM': 'user_id',  # 令牌中包含用户 ID 的字段名称。

    # 指定支持的令牌类型类
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),  # 指定支持的 Token 类，默认为 AccessToken。

    # 指定令牌中的类型字段名称
    'TOKEN_TYPE_CLAIM': 'token_type',  # 令牌中标识 Token 类型的字段名称。

    # 配置令牌中的 JTI（JWT ID）字段名称
    'JTI_CLAIM': 'jti',  # 用于唯一标识令牌的字段名称。

    # 配置 Sliding Token 的刷新到期时间字段
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',  # Sliding Token 中记录刷新过期时间的字段名称。

    # 配置 Sliding Token 的生命周期
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),  # Sliding Token 的有效期为 5 分钟。

    # 配置 Sliding Token 的刷新有效期
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),  # Sliding Token 的刷新有效期为 1 天。

}

ROOT_URLCONF = 'skylark_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'skylark_api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "HOST": "127.0.0.1",
        "PORT": 3306,
        "USER": "hk_yiguan",
        "PASSWORD": "hkyx",
        "NAME": "skylark_yun",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

# 修改使用中文界面
LANGUAGE_CODE = 'zh-Hans'

# 修改时区
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False # 保证数据库中django中使用的时区一致！

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# 访问静态文件的url地址前缀
STATIC_URL = '/static/'
# 设置django的静态文件目录
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

# 项目中存储上传文件的根目录[暂时配置]，注意，uploads目录需要手动创建否则上传文件时报错
MEDIA_ROOT = os.path.join(BASE_DIR, "uploads")  # 上传文件时直接访问uploads文件位置
# 访问上传文件的url地址前缀
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志位置,日志文件名,日志保存目录必须手动创建
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/skylark.log"),
            # 日志文件的最大值,这里我们设置300M
            'maxBytes': 300 * 1024 * 1024,
            # 日志文件的数量,设置最大日志数量为10
            'backupCount': 10,
            # 日志格式:详细格式
            'formatter': 'verbose'
        },
    },
    # 日志对象
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'propagate': True,  # 是否让日志信息继续冒泡给其他的日志处理系统
        },
    }
}

# Django-redis配置
CACHES = {
    'default': {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        }
    },
    'session': {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        }
    },
    # 短信验证码的存储
    'sms_code': {
        "BACKEND": "django_redis.cache.RedisCache",
        # 使用redis数据库2
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        }
    },
    # 购物车
    "cart":{
         "BACKEND": "django_redis.cache.RedisCache",
         "LOCATION": "redis://127.0.0.1:6379/3",
         "OPTIONS": {
             "CLIENT_CLASS": "django_redis.client.DefaultClient",
         }
     },
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = 'session'

# 腾讯云短信配置
TENCENT_SMS = {
    'SecretId': 'AKIDiHaeS0IJ4ZsviGYaOwDEzThfMnzvb092',
    'SecretKey': 'g5E7k7EJSUGm4BDAwShhRv96nEPKzObc',
    'SMS_SDK_APP_ID': '1400957144',  # 替换为SmsSdkAppId
    'SIGN_NAME': '湖南好课优选教育',  # 替换为已审核通过的签名
    'TEMPLATE_ID': '2339789',  # 替换为已审核通过的模板ID
    'REGION': 'ap-guangzhou',  # 区域设置，默认广州
}

# https://newpanjing.github.io/simpleui_docs/config.html学习simpleui的使用
# simpleui配置
SIMPLEUI_CONFIG = {
    'system_keep': False,  # 关闭系统菜单
    'dynamic': False,  # 动态菜单折叠与展开
    'menu_display': ['广告管理', '课程管理', '优惠管理'],  # 添加课程管理主菜单名称
    'menus': [
        {
            'name': '广告管理',
            'icon': 'fa-solid fa-bullhorn',
            'models': [
                {
                    'name': '轮播图管理',
                    # 图标可以去https://fontawesome.com/icons网站选择
                    'icon': 'fa-solid fa-image',
                    # url是'/admin/应用名/admin.py文件中注册模型的小写 如@admin.register(Course) 则为course'
                    'url': '/admin/Home/banner/',
                },
                {
                    'name': '导航管理',
                    'icon': 'fa-solid fa-bars',
                    'url': '/admin/Home/nav/'
                }
            ],
        },
        {
            'name': '课程管理',  # 新增的课程管理菜单
            'icon': 'fa-solid fa-book',
            'models': [
                {
                    'name': '课程分类',
                    'url': '/admin/Course/coursecategory/',
                },
                {
                    'name': '专题课程',
                    'url': '/admin/Course/course/',
                },
                {
                    'name': '讲师导师',
                    'url': '/admin/Course/teacher/',
                },
                {
                    'name': '课程章节',
                    'url': '/admin/Course/coursechapter/',
                },
                {
                    'name': '课程课时',
                    'url': '/admin/Course/courselesson/',
                }
            ]
        },
        {
            'name': '优惠管理',
            'icon': 'fas fa-tags',
            'models': [
                {
                    'name': '优惠类型',
                    'icon': 'fas fa-tag',
                    'url': '/admin/Course/coursediscounttype/'
                },
                {
                    'name': '优惠策略',
                    'icon': 'fas fa-percent',
                    'url': '/admin/Course/coursediscount/'
                },
                {
                    'name': '优惠活动',
                    'icon': 'fas fa-calendar-alt',
                    'url': '/admin/Course/activity/'
                },
                {
                    'name': '课程优惠关系',
                    'icon': 'fas fa-link',
                    'url': '/admin/Course/coursepricediscount/'
                },
                {
                    'name': '课程有效期管理',
                    'icon': 'fas fa-link',
                    'url': '/admin/Course/courseexpire/'
                },
                {
                    'name':'优惠券',
                    'icon': 'fas fa-link',
                    'url': '/admin/Coupon/coupon/'
                },
                {
                    'name':'我的优惠券',
                    'icon': 'fas fa-link',
                    'url': '/admin/Coupon/usercoupon/'
                }
            ]
        },
    ],
}